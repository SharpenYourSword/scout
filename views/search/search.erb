<% content_for :sidebar_left do %>
 	<div class="module filters">
		<h4>Filter search results</h4>
		<form class="filters">

	    <%= hidden_field_tag :query, :class => "query" %>
	    <%= hidden_field_tag :subscription_type, :class => "subscription_type" %>
	    <!-- subscription-specific filter partial -->
	    <%= partial "subscriptions/#{subscription.subscription_type}/filter", :engine => "erb", :locals => {:subscription => subscription} %>
		</form>
	</div>

  <% if developer_mode? %>
    <div class="module developer json">

		<h4>The Data</h4>
		<p>
			See the <a href="<%= developer_url subscription %>">underlying data</a>.
		</p>
    </div>
  <% end %>

  <div class="module data explanation">
    <%= partial "subscriptions/#{subscription.subscription_type}/data", :engine => "erb" %>
  </div>

  <%= recent_searches %>
<% end %>

<div class="results contentArea right">
	
	<!--<% content_for :title do %>-->
	<!--<% end %>-->
		<div class="pageTitle">
		    <div class="searchParameters">
		        <h2>"<%= h query %>"</h2>
		        in 
            <span class="category"><%= subscription.search_name %></span> 
            <% if subscription.filters.any? %>
  				    <div class="filters">
                <%= subscription.filters.map do |field, value|
                  "<span>#{subscription.filter_name field, value}</span>"
                end.join(", ") %>
              </div>
            <% end %>
		    </div>

		    <button class="follow search">
		      <span>Follow</span>
		    </button>

		    <button class="following search">
		      <span>Following</span>
		    </button>
			<div class="clear"></div>
		</div>

    
    <% subscriptions.each do |subscription| %>
        <div class="search" id="<%= subscription.subscription_type %>" data-subscription="<%= subscription.subscription_type %>">

          <section class="container clear">
            <div class="loading">
              <span>Fetching ...</span>
            </div>

            <div class="error">
              <span>There was an error while searching.</span>
            </div>

            <div class="populate">
            </div>
          </section>

        </div>
    <% end %>

</div>

<div class="clear"></div>

<script type="text/javascript">
  
  $(function() {
    initializeDeveloper();
    initializeFilters();
    initializeControls();
    search();
  });

  function initializeDeveloper() {
    $("div.json.developer a").attr("href","<%= developer_url subscription %>");
  }

  // initializes both the sidebar form filters, and the top search form
  function initializeFilters() {
    $("input.query").val("<%= h query %>");
    $("input.subscription_type, select.subscription_type").val("<%= subscription.subscription_type %>");
    
    // first, reset all filters
    $("form.filters .filter_control").val("");

    // then, initialize according to the query string
    <% subscription.filters.each do |key, value| %>
      $("form.filters input[name=<%= key %>], form.filters select[name=<%=key %>]").val("<%= value %>");
    <% end %>
  }

  function initializeControls() {
    // make sure to clear all events so they don't stack

    $("button.follow").hide();
    $("button.following").hide();

    <% if subscription.new_record? %>
      $("button.follow").show();
    <% else %>
      $("button.following").show();
    <% end %>

    <% if logged_in? %>
      $("button.follow").off("click").click(follow);
      $("button.following").off("click").click(unfollow);
      $("button.following").off("mouseover").mouseover(function() {
        $(this).addClass("unfollow").find("span").html("Unfollow");
      }).mouseout(function() {
        $(this).removeClass("unfollow").find("span").html("Following");
      });
    <% else %>
      $("button.follow").off("click").click(function() {window.location = "/login?redirect=" + Utils.currentPath();});
      $("button.following").off("click");
    <% end %>

    $("form.filters .filter_control").off("change").change(function() {
      var subscription_type = currentSubscriptionType();
      var query = encodeURIComponent(currentQuery());
      var filters = currentFilters();
      
      var filterString = $.param(filters).replace(/%5B/g, "[").replace(/%5D/g, "]");
      var url = "/search/" + subscription_type + "/" + query;
      if (filterString) url += "?" + filterString;

      Utils.pjax(url, ".contentArea");
    });
  }

  function currentFilters() {
    var type = currentSubscriptionType();
    var filters = {};
    filters[type] = {};

    $("form.filters .filter_control").each(function(i, element) {
      var value = $(element).val();
      if (value) // don't pass along empty strings
        filters[type][$(element).attr("name")] = value;
    });

    return filters;
  }

  function currentQuery() {
    return $("form.filters input.query").val();
  }

  function currentSubscriptionType() {
    return $("form.filters input.subscription_type").val();
  }

  function follow() {
    var subscription_type = currentSubscriptionType();
    var query = encodeURIComponent(currentQuery());
    var filters = currentFilters();

    var subscription = $.extend(filters, {
      subscription_type: subscription_type,
      query: query
    });

    $("button.follow").hide();
    $("button.following").show();

    $.post("/subscriptions", subscription, function(data) {
      Utils.log("Created new subscription.");
    }).error(function() {
      Utils.log("ERROR creating new subscription.");
      $("button.follow").show();
      $("button.following").hide();
    });

    return false;
  }

  function unfollow() {
    var subscription_type = currentSubscriptionType();
    var query = encodeURIComponent(currentQuery());
    var filters = currentFilters();

    var subscription = $.extend(filters, {
      subscription_type: subscription_type,
      query: query
    });

    $("button.follow").show();
    $("button.following").hide();

    $.post("/subscriptions", $.extend(subscription, {_method: "delete"}), function(data) {
      Utils.log("Removed subscription.");
    }).error(function() {
      Utils.log("ERROR removing subscription.");
      $("button.follow").hide();
      $("button.following").show();
    });

    return false;
  }

  function search(searchOptions) {
    if (!searchOptions) searchOptions = {per_page: 20, page: 1};

    var subscription_type = currentSubscriptionType();
    var query = encodeURIComponent(currentQuery());
    var container = $(".results div.search[data-subscription=" + subscription_type + "]");

    // reset elements inside tab
    container.find(".loading").show();
    container.find(".populate").html("").hide();
    
    // all search options (filters, pagination)
    var search = {};
    
    // carry along the universal and subscription-specific filters
    $.extend(search, currentFilters());

    // any one-time search options (pagination)
    $.extend(search, searchOptions);

    $.get("/fetch/search/" + subscription_type + "/" + query, search, function(data) {
      
      container.find(".loading").hide();
      container.find(".populate").html(data).show();

    }).error(function() {
      container.find(".loading").hide();
      container.find(".error").show();
    });
  }
</script>
