<% content_for :title do %>
    <div class="trackSubscribe searchParameters">
        <h2>'<%= h query %>'</h2>
        in 
        <% subscriptions.each_with_index do |subscription, i| %>
          <a class="dataset" href="#<%= subscription.subscription_type %>"><%= subscription.search_name %></a><%= ", " unless i == (subscriptions.size - 1) %>
        <% end %>
    </div>
    <button>
        <span>Subscribe</span>
    </button>
<% end %>

<% if false %>
<% content_for :sidebar_left do %>
    <div class="module filters">
        <h4>Filter search results</h4>
        <form>
            <fieldset>
                <legend>Congress</legend>
                <label><input type="checkbox" name="" value="" id="">Bills</label>
                <label><input type="checkbox" name="" value="" id="">Speeches</label>
            </fieldset>
            <fieldset>
                <legend>Regulations</legend>
                <label><input type="checkbox" name="" value="" id="">Proposed/final regulations</label>
            </fieldset>
            <fieldset>                          
                <legend>State Bills</legend>
                <input type="checkbox" name="" value="" id="">
                <select name="category">
                    <option value="" selected="selected">--- All States ---</option>
                    <% state_map.keys.sort.each do |code| %>
                        <option value="<%= code %>"><%= state_map[code] %></option>
                    <% end %>
                </select>
            </fieldset>
            <button type="submit">
                <span>Update results</span>
            </button>
        </form>
    </div>
    <%= recent_searches %>
<% end %>
<% end %>

<div class="contentArea right results">
    
    <% subscriptions.each do |subscription| %>
        <div class="search"
          id="<%= subscription.subscription_type %>"
          data-subscription="<%= subscription.subscription_type %>"
          >

          <section class="container clear">
            <h3><%= subscription.search_name %></h3>

            <div class="loading">
              <span>Searching ...</span>
            </div>

            <div class="error">
              <span>There was an error while searching.</span>
            </div>

            <div class="populate">
            </div>
          </section>

        </div>
    <% end %>

</div>

<div class="clear"></div>

<!-- 
<div class="flag overlay">
    <div class="clear"></div>
    <div class="light white">
        <div class="clear"></div>
        <p>You've modified the search parameters on this subscription. Would you like to update it?</p>
        <a class="button update textIndent" type="submit">
            Update
        </a>
        <a class="ignore" type="submit">
            No thanks
        </a>
    </div>
    <div class="fade black"></div>  
</div>

 -->

<script type="text/javascript">
  // hold the current state of the filters
  // needs to stay a separate hash, since the form can 
  // change without auto-committing the changes

  // initialize with any subscription-wide filters (none yet)
  var filters = {
    "all": <%= (params[:all] || {}).to_json %>
  };

  // put in a delay block in case this is being rendered before the layout
  $(function() {
    var query = "<%= query %>";
    
    <% subscriptions.each do |subscription| %>

      <% # "I think this is safe..." %>
      filters["<%= subscription.subscription_type %>"] = <%= subscription.data.to_json %>;

      searchFor(
        query, "<%= subscription.subscription_type %>", 
        {per_page: <%= subscriptions.size == 1 ? 20 : 2 %>}
      );
    <% end %>
  });

  function searchFor(query, subscription, searchOptions) {
      var query_slug = encodeURIComponent(query);
      var container = $(".results div.search[data-subscription=" + subscription + "]");

      // reset elements inside tab
      container.find(".loading").show();
      container.find(".populate").html("").hide();
      
      // all search options
      var search = {};

      // carry along the universal and subscription-specific filters
      var these_filters = {}
      these_filters.all = filters.all;
      these_filters[subscription] = filters[subscription];

      $.extend(search, these_filters);

      // any one-time search options (pagination)
      $.extend(search, searchOptions);

      $.get("/fetch/search/" + subscription + "/" + query_slug, search, function(data) {
        
        container.find(".loading").hide();
        container.find(".populate").html(data.html).show();

        // set the 'more' link to carry on the filters (and only the filters)
        container.find(".populate a.viewMore").attr("href", 
          "/search/" + subscription + "/" + query_slug + "?" + $.param(these_filters)
        );

        // if (data.search_url) {
        //   container.find("div.developer.json.search").show().find("a").attr("href", data.search_url);
        // }

      }).error(function() {
        container.find(".loading").hide();
        container.find(".error").show();
      });
    }
</script>